spring.application.name=currency-exchange
spring.config.import=optional:configserver:http://localhost:8888
server.port=8000

#h2 db

spring.datasource.url = jdbc:h2:mem:testdb
spring.h2.console.enabled=true
spring.jpa.show-sql=true
#used to defer running any sqls before the original db object is created
spring.jpa.defer-datasource-initialization = true 

#mentioning Eureka naming server where it runs as part of registering the currency exchange 
#app in eureka naming server (this is not needed optional) but better to add for understanding
#Having eureka client in pom.xml is enough to register api gateway to Eureka server.
#Registering Currency Exchange in Eureka (this entry is optional) 
eureka.client.service-url.default-zone=http://localhost:8761/eureka

#Configuring max attempts to hit the url using Retry. sample-api is the name given in the retry option in 
#CircuitBreakPatternController Retry option.
#
resilience4j.retry.instances.api-retries.maxAttempts=5

#how much time interval to wait between hitting the services to retry. Here 1s is given, so in a gap of 1 sec or 1000ms, the service will be hit again 
resilience4j.retry.instances.api-retries.waitDuration=1000

#For each retry to hit the url("http:localhost:8080/test"), the in-between time to retry the url will be exponentially more.
resilience4j.retry.instances.api-retries.enableExponentialBackoff=true

#CircuitBreaker	- there are many properties for this, but only we have used failureRateThreshold here
# it means failure threshold to hit the microservices, i.e out of X calls to microservice, if we dont get 
# results for 40% of X calls, then the microservice is not fit to serve and it is not up.
#@CircuitBreaker(name = "circuit", fallbackMethod = "circuitFallbackMethod")
#resilience4j.circuitbreaker.instances.circuit.failureRateThreshold=40